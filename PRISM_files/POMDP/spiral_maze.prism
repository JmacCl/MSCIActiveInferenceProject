pomdp

observables
	o
endobservables
// o=0 - observation in initial state (s-1)
// o=1 - west and south walls (s0, s19)
// o=2 - north and south walls (s1, s2, s3, s4, s5, s6, s14, s15, s16, s17, s18, s24, s25, s26, s30)
// o=3 - north and east walls (s7, s27)
// o=4 - east and west walls (s8, s9, s10, s11, s12, s20, s21, s22, s28)
// o=5 - east and south (s13, s29)
// o=6 - north and west (s23)
// o=7 - terminal state (s31)

module maze

	s : [-1..31];
	o : [0..7];

[] s=-1 -> 1/28 : (s'=0) & (o'=1) +
		1/28 : (s'=1) & (o'=2) +
		1/28 : (s'=2) & (o'=2) +
		1/28 : (s'=3) & (o'=2) +
		1/28 : (s'=4) & (o'=2) +
		1/28 : (s'=5) & (o'=2) +
		1/28 : (s'=6) & (o'=2) +
		1/28 : (s'=7) & (o'=3) +
		1/28 : (s'=8) & (o'=4) +
		1/28 : (s'=9) & (o'=4) +
		1/28 : (s'=10) & (o'=4) +
		1/28 : (s'=11) & (o'=4) +
		1/28 : (s'=12) & (o'=4) +
		1/28 : (s'=13) & (o'=5) +
		1/28 : (s'=14) & (o'=2) +
		1/28 : (s'=15) & (o'=2) +
		1/28 : (s'=16) & (o'=2) +
		1/28 : (s'=17) & (o'=2) +
		1/28 : (s'=18) & (o'=2) +
		1/28 : (s'=19) & (o'=1) +
		1/28 : (s'=20) & (o'=4) +
		1/28 : (s'=21) & (o'=4) +
		1/28 : (s'=22) & (o'=4) +
		1/28 : (s'=23) & (o'=6) +
		1/28 : (s'=24) & (o'=2) +
		1/28 : (s'=25) & (o'=2) +
		1/28 : (s'=26) & (o'=2) +
		1/28 : (s'=27) & (o'=3) +
		1/28 : (s'=28) & (o'=4) +
		1/28 : (s'=29) & (o'=5) +
		1/28 : (s'=30) & (o'=2) +
		1/28 : (s'=31) & (o'=7);

    // Moving within the maze
    [north] s=0 -> (s'=0);
    [south] s=0 -> (s'=0);
    [east] s=0 -> (s'=1) & (o'=2);
    [west] s=0 -> (s'=0);

    [north] s=1 -> (s'=1);
    [south] s=1 -> (s'=1);
    [east] s=1 -> (s'=2) & (o'=2);
    [west] s=1 -> (s'=0) & (o'=1);

    [north] s=2 -> (s'=2);
    [south] s=2 -> (s'=2);
    [east] s=2 -> (s'=3) & (o'=2);
    [west] s=2 -> (s'=1) & (o'=2);

    [north] s=3 -> (s'=3);
    [south] s=3 -> (s'=3);
    [east] s=3 -> (s'=4) & (o'=2);
    [west] s=3 -> (s'=2) & (o'=2);

    [north] s=4 -> (s'=4);
    [south] s=4 -> (s'=4);
    [east] s=4 -> (s'=5) & (o'=2);
    [west] s=4 -> (s'=3) & (o'=2);

    [north] s=5 -> (s'=5);
    [south] s=5 -> (s'=5);
    [east] s=5 -> (s'=6) & (o'=2);
    [west] s=5 -> (s'=4) & (o'=2);

    [north] s=6 -> (s'=6);
    [south] s=6 -> (s'=6);
    [east] s=7 -> (s'=6) & (o'=3);
    [west] s=6 -> (s'=5) & (o'=2);

    [north] s=7 -> (s'=7);
    [south] s=7 -> (s'=8) & (o'=4);
    [east] s=7 -> (s'=7);
    [west] s=7 -> (s'=6) & (o'=2);

    [north] s=8 -> (s'=7) & (o'=3);
    [south] s=8 -> (s'=9) & (o'=4);
    [east] s=8 -> (s'=8);
    [west] s=8 -> (s'=8);

    [north] s=9 -> (s'=8) & (o'=4);
    [south] s=9 -> (s'=10) & (o'=4);
    [east] s=9 -> (s'=9);
    [west] s=9 -> (s'=9);

    [north] s=10 -> (s'=9) & (o'=4);
    [south] s=10 -> (s'=11) & (o'=4);
    [east] s=10 -> (s'=10);
    [west] s=10 -> (s'=10);

    [north] s=11 -> (s'=10) & (o'=4);
    [south] s=11 -> (s'=12) & (o'=4);
    [east] s=11 -> (s'=11);
    [west] s=11 -> (s'=11);

    [north] s=12 -> (s'=11) & (o'=4);
    [south] s=12 -> (s'=13) & (o'=3);
    [east] s=12 -> (s'=12);
    [west] s=12 -> (s'=12);

    [north] s=13 -> (s'=12) & (o'=4);
    [south] s=13 -> (s'=13);
    [east] s=13 -> (s'=13);
    [west] s=13 -> (s'=14) & (o'=2);

    [north] s=14 -> (s'=14);
    [south] s=14 -> (s'=14);
    [east] s=14 -> (s'=13) & (o'=3);
    [west] s=14 -> (s'=15) & (o'=2);

    [north] s=15 -> (s'=15);
    [south] s=15 -> (s'=15);
    [east] s=15 -> (s'=14) & (o'=2);
    [west] s=15 -> (s'=16) & (o'=2);

    [north] s=16 -> (s'=16);
    [south] s=16 -> (s'=16);
    [east] s=16 -> (s'=15) & (o'=2);
    [west] s=16 -> (s'=17) & (o'=2);

    [north] s=17 -> (s'=17);
    [south] s=17 -> (s'=17);
    [east] s=17 -> (s'=16) & (o'=2);
    [west] s=17 -> (s'=18) & (o'=2);

    [north] s=18 -> (s'=18);
    [south] s=18 -> (s'=18);
    [east] s=18 -> (s'=17) & (o'=2);
    [west] s=18 -> (s'=19) & (o'=1);

    [north] s=19 -> (s'=20) & (o'=4);
    [south] s=19 -> (s'=19);
    [east] s=19 -> (s'=18) & (o'=2);
    [west] s=19 -> (s'=19);

    [north] s=20 -> (s'=21) & (o'=4);
    [south] s=20 -> (s'=19) & (o'=1);
    [east] s=20 -> (s'=20);
    [west] s=20 -> (s'=20);

    [north] s=21 -> (s'=22) & (o'=4);
    [south] s=21 -> (s'=20) & (o'=4);
    [east] s=21 -> (s'=21);
    [west] s=21 -> (s'=21);

    [north] s=22 -> (s'=23) & (o'=6);
    [south] s=22 -> (s'=21) & (o'=4);
    [east] s=22 -> (s'=22);
    [west] s=22 -> (s'=22);

    [north] s=23 -> (s'=23);
    [south] s=23 -> (s'=22) & (o'=o);
    [east] s=23 -> (s'=24) & (o'=2);
    [west] s=23 -> (s'=23);

    [north] s=24 -> (s'=24);
    [south] s=24 -> (s'=24);
    [east] s=24 -> (s'=25) & (o'=2);
    [west] s=24 -> (s'=23) & (o'=6);

    [north] s=25 -> (s'=25);
    [south] s=25 -> (s'=25);
    [east] s=25 -> (s'=26) & (o'=2);
    [west] s=25 -> (s'=24) & (o'=2);

    [north] s=26 -> (s'=26);
    [south] s=26 -> (s'=26);
    [east] s=26 -> (s'=27) & (o'=3);
    [west] s=26 -> (s'=25) & (o'=2);

    [north] s=27 -> (s'=27);
    [south] s=27 -> (s'=28) & (o'=4);
    [east] s=27 -> (s'=27);
    [west] s=27 -> (s'=26) & (o'=2);

    [north] s=28 -> (s'=27) & (o'=3);
    [south] s=28 -> (s'=29) & (o'=5);
    [east] s=28 -> (s'=28);
    [west] s=28 -> (s'=28);

    [north] s=29 -> (s'=28) & (o'=4);
    [south] s=29 -> (s'=29);
    [east] s=29 -> (s'=29);
    [west] s=29 -> (s'=30) & (o'=2);

    [north] s=30 -> (s'=30);
    [south] s=30 -> (s'=30);
    [east] s=30 -> (s'=29) & (o'=5);
    [west] s=30 -> (s'=31) & (o'=7);

    // Loop when target is reached
    [done] s=31 -> true;
endmodule

rewards
	[north] true : 1;
	[south] true : 1;
	[east] true : 1;
	[west] true : 1;
endrewards

// target observation
label "target" = s=31;